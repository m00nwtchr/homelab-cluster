app-template:
  controllers:
    sonarr:
      annotations:
        reloader.stakater.com/auto: "true"

      pod:
        securityContext:
          runAsUser: 2000
          runAsGroup: 2000
          runAsNonRoot: true
          fsGroup: 2000
          fsGroupChangePolicy: "OnRootMismatch"
      #          supplementalGroups:
      #            - 65542 # gladius:external-services

      #      initContainers:
      #        disable-ipv6:
      #          args:
      #            - -w
      #            - net.ipv6.conf.all.disable_ipv6=1
      #          command:
      #            - /bin/sysctl
      #          image:
      #            repository: docker.io/busybox
      #            tag: latest
      #            pullPolicy: IfNotPresent
      #          securityContext:
      #            privileged: true

      containers:
        app:
          image:
            repository: ghcr.io/home-operations/sonarr
            tag: 4.0.15.2940@sha256:ca6c735014bdfb04ce043bf1323a068ab1d1228eea5bab8305ca0722df7baf78
          env:
            SONARR__APP__INSTANCENAME: Sonarr
            SONARR__LOG__LEVEL: info

            SONARR__AUTH__APIKEY:
              valueFrom:
                secretKeyRef:
                  name: sonarr-secret
                  key: api_key
            SONARR__AUTH__METHOD: External
            SONARR__LOG__ANALYTICSENABLED: "False"
            SONARR__LOG__DBENABLED: "False"
            SONARR__POSTGRES__HOST: postgres-rw.postgres.svc
            SONARR__POSTGRES__USER:
              valueFrom:
                secretKeyRef:
                  name: postgres-sonarr
                  key: username
            SONARR__POSTGRES__PASSWORD:
              valueFrom:
                secretKeyRef:
                  name: postgres-sonarr
                  key: password
            SONARR__POSTGRES__MAINDB: sonarr
            SONARR__SERVER__PORT: &port 8989
            SONARR__UPDATE__BRANCH: develop
          probes:
            liveness: &probes
              enabled: true
              custom: true
              spec:
                httpGet:
                  path: /ping
                  port: *port
                initialDelaySeconds: 0
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 3
            readiness: *probes
          resources:
            requests:
              cpu: 20m
              memory: 384Mi
            limits:
              memory: 2Gi
          securityContext:
            allowPrivilegeEscalation: true
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL

  service:
    app:
      controller: sonarr
      ipFamilyPolicy: PreferDualStack
      ports:
        http:
          targetPort: *port
          port: 80

  # ingress:
  #   app:
  #     annotations:
  #       traefik.ingress.kubernetes.io/router.middlewares: traefik-vpn-only@kubernetescrd,traefik-auth@kubernetescrd
  #     hosts:
  #       - host: sonarr.svc.m00nlit.dev
  #         paths:
  #           - path: /
  #             service:
  #               identifier: app
  #               port: http

  persistence:
    config:
      size: 1Gi
      accessMode: ReadWriteOnce
      annotations:
        argocd.argoproj.io/sync-options: Delete=false
    add-ons:
      type: emptyDir
    config-logs:
      type: emptyDir
      globalMounts:
        - path: /config/logs
    tmp:
      type: emptyDir
    media:
      existingClaim: media
      globalMounts:
        - path: /mnt/media