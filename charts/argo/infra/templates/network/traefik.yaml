apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: traefik-crds
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "0"
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: kubernetes
  source:
    repoURL: https://traefik.github.io/charts
    chart: traefik-crds
    targetRevision: 1.2.0
  destination:
    name: in-cluster
    namespace: traefik
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: traefik
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "1"
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: kubernetes
  source:
    repoURL: https://traefik.github.io/charts
    chart: traefik
    targetRevision: 34.1.0
    helm:
      skipCrds: true
      valuesObject:
        ingressRoute:
          dashboard:
            enabled: true
            matchRule: Host(`traefik.svc.{{ .Values.domain }}`)
            entryPoints:
              - websecure
            middlewares:
              - name: vpn-only
                namespace: traefik

        service:
          type: ClusterIP
          externalIPs:
            - 2a02:a313:43e4:7080::7dc5
            - fd7a:115c:a1e0::f201:2d35
            - 100.116.45.53
            - 10.0.0.87
          annotations:
            svccontroller.k3s.cattle.io/tolerations: |
              - operator: Exists
                effect: NoSchedule
        ports:
          web:
            redirections:
              to: websecure
              scheme: https
              priority: 10
          websecure:
            asDefault: true
            middlewares:
              - traefik-bouncer@kubernetescrd
              - traefik-ssl-opts@kubernetescrd
              - traefik-compress@kubernetescrd
            http3:
              enabled: true
              advertisedPort: 443
            transport:
              respondingTimeouts:
                readTimeout: 600
                idleTimeout: 600
                writeTimeout: 600

        providers:
          kubernetesCRD:
            allowCrossNamespace: true

        tlsStore:
          default:
            certificates:
              - secretName: "wildcard-{{ include "domainDashed" . }}-tls"
              - secretName: "wildcard-svc-{{ include "domainDashed" . }}-tls"

        tlsOptions:
          default:
            labels: { }
            sniStrict: true
            minVersion: "VersionTLS13"
          intermediate:
            labels: { }
            sniStrict: true
            minVersion: "VersionTLS12"
            cipherSuites:
              - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
              - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
              - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
              - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
              - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
              - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305

        logs:
          access:
            enabled: true
            filePath: "/var/log/traefik/access.log"
            filters:
              statuscodes: "400-599"

        deployment:
          additionalVolumes:
            - name: traefik-logs
              emptyDir: { }

          additionalContainers:
            - name: accesslog
              image: busybox
              command: [ "/bin/sh", "-c", "cat -u /var/log/traefik/access.log" ]
              volumeMounts:
                - name: traefik-logs
                  mountPath: /var/log/traefik

          initContainers:
            - name: init-accesslog
              image: busybox
              command: [ "/bin/sh", "-c", "mkfifo /var/log/traefik/access.log" ]
              volumeMounts:
                - name: traefik-logs
                  mountPath: /var/log/traefik

        additionalVolumeMounts:
          - name: traefik-logs
            mountPath: /var/log/traefik

        experimental:
          plugins:
            bouncer:
              moduleName: "github.com/maxlerebourg/crowdsec-bouncer-traefik-plugin"
              version: "v1.4.0"

        extraObjects:
          - apiVersion: traefik.io/v1alpha1
            kind: Middleware
            metadata:
              name: ssl-opts
            spec:
              headers:
                stsSeconds: 63072000
                stsIncludeSubdomains: true
                stsPreload: true
                forceSTSHeader: true
                contentTypeNosniff: true
                browserXssFilter: true
                customFrameOptionsValue: 'SAMEORIGIN'
                contentSecurityPolicy: "upgrade-insecure-requests; frame-src 'self'; frame-ancestors 'self';"
                referrerPolicy: "same-origin"

                customResponseHeaders:
                  X-Robots-Tag: "noindex,nofollow,nosnippet,noarchive,notranslate,noimageindex"

          - apiVersion: traefik.io/v1alpha1
            kind: Middleware
            metadata:
              name: compress
            spec:
              compress: { }

          - apiVersion: traefik.io/v1alpha1
            kind: Middleware
            metadata:
              name: auth
            spec:
              forwardAuth:
                address: http://oauth2-proxy.traefik.svc
                trustForwardHeader: true
                authResponseHeaders:
                  - X-Auth-Request-Access-Token
                  - Authorization

          - apiVersion: traefik.io/v1alpha1
            kind: Middleware
            metadata:
              name: redirect-to-www
            spec:
              redirectRegex:
                permanent: true
                regex: "^https?://(?:www\\.)?(.+)"
                replacement: "https://www.${1}"

          - apiVersion: traefik.io/v1alpha1
            kind: Middleware
            metadata:
              name: vpn-only
            spec:
              ipAllowList:
                sourceRange:
                  - 100.64.0.0/10
                  - fd7a:115c:a1e0::/48

          - apiVersion: traefik.io/v1alpha1
            kind: IngressRoute
            metadata:
              name: root
              namespace: default
            spec:
              routes:
                - match: Host(`{{ .Values.domain }}`)
                  kind: Rule
                  middlewares:
                    - name: redirect-to-www
                      namespace: traefik
                  services:
                    - name: noop@internal
                      kind: TraefikService

              tls:
                options:
                  name: intermediate
                  namespace: traefik


  {{/*        volumes:*/}}
  {{/*          - name: crowdsec-bouncer-tls*/}}
  {{/*            mountPath: "/run/crowdsec/"*/}}
  {{/*            type: secret*/}}

        globalArguments: [ ]
        metrics:
          prometheus:
            service:
              enabled: true
            disableAPICheck: false
            serviceMonitor:
              enabled: true
              metricRelabelings:
                - sourceLabels: [ __name__ ]
                  separator: ;
                  regex: ^fluentd_output_status_buffer_(oldest|newest)_.+
                  replacement: $1
                  action: drop
              relabelings:
                - sourceLabels: [ __meta_kubernetes_pod_node_name ]
                  separator: ;
                  regex: ^(.*)$
                  targetLabel: nodename
                  replacement: $1
                  action: replace
              jobLabel: traefik
              interval: 30s
              honorLabels: true
            prometheusRule:
              enabled: true
              rules:
                - alert: TraefikDown
                  expr: up{job="traefik"} == 0
                  for: 5m
                  labels:
                    context: traefik
                    severity: warning
                  annotations:
                    summary: "Traefik Down"
                    description: "{{`{{ $labels.pod }} on {{ $labels.nodename }} is down`}}"
  destination:
    name: in-cluster
    namespace: traefik
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
