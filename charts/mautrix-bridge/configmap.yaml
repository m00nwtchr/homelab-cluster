{{- $bridgeMode := include "bridge-mode" . -}}

{{- $id := .Values.bridge.appserviceId -}}
{{- if empty $id -}}
{{- $id = .Values.bridge.type -}}
{{- end -}}
{{- $username := .Values.bridge.username -}}
{{- if empty $username -}}
{{- $username = printf "%sbot" $bridgeMode -}}
{{- end -}}

{{- $displayName := .Values.bridge.displayName -}}
{{- if empty $displayName -}}
{{- $displayName = printf "%s bridge bot" (title $bridgeMode) -}}
{{- end -}}
{{- $avatar := .Values.bridge.avatar -}}
{{- if empty $avatar -}}
{{- if eq .Values.bridge.type "meta" -}}
{{- $avatar = "mxc://maunium.net/DxpVrwwzPUwaUSazpsjXgcKB" -}}
{{- end -}}
{{- end -}}

{{- $address := printf "http://%s.%s.svc" .Release.Name .Release.Namespace -}}
{{- $serverNameEscaped := include "escape-dots" .Values.matrix.serverName -}}

{{- $secret := lookup "v1" "Secret" .Release.Namespace (printf "%s-config" .Release.Name) -}}
{{- $asToken := "" -}}
{{- $hsToken := "" -}}
{{- $serverKey := "" }}
{{- $signingKey := "" -}}
{{- $pickleKey := "" -}}
{{- $senderLocalPart := "" -}}

{{- if $secret -}}
{{- $data := fromYaml (b64dec (index $secret.data "config.yaml")) -}}
{{- $asToken := $data.appservice.as_token -}}
{{- $hsToken := $data.appservice.hs_token -}}
{{- $signingKey := $data.public_media.signing_key -}}
{{- $pickleKey := $data.encryption.pickle_key -}}
{{- $d := fromYaml (b64dec (index $secret.data "registration.yaml")) -}}
{{- $senderLocalPart := fromYaml $d.sender_localpart -}}
{{- else -}}
{{- $asToken := randAlphaNum 64 -}}
{{- $hsToken := randAlphaNum 64 -}}
{{- $serverKey := genPrivateKey "ecdsa" }}
{{- $signingKey := randAlphaNum 64 -}}
{{- $pickleKey := randAlphaNum 64 -}}
{{- $senderLocalPart := randAlphaNum 32 -}}
{{- end -}}
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-config
stringData:
  registration.yaml: |
    id: "{{ .Release.Name }}"
    url: "{{ $address }}
    as_token: {{ $asToken }}
    hs_token: {{ $hsToken }}
    sender_localpart: {{ $senderLocalPart }}
    rate_limited: false
    namespaces:
      users:
        - regex: ^@{{ $username }}:{{ $serverNameEscaped }}$
          exclusive: true
        - regex: ^@{{ $bridgeMode }}_.*:{{ $serverNameEscaped }}$
          exclusive: true
    de.sorunome.msc2409.push_ephemeral: true
    receive_ephemeral: true
  config.yaml: |
    network:
{{- if eq .Values.bridge.type "meta" }}
      mode: "{{ .Values.meta.mode }}"
      displayname_template: '{{ .Values.meta.displayname_template }}'
{{- end }}

    bridge:
      command_prefix: '!{{ .Values.bridge.type }}'
      personal_filtering_spaces: true
      private_chat_portal_meta: false
      async_events: false
      split_portals: false
      resend_bridge_info: false

      bridge_matrix_leave: false
      tag_only_on_create: true
      mute_only_on_create: false

      permissions:
        "*": relay
        "{{ .Values.matrix.serverName }}": user
        "{{ .Values.bridge.admin }}": admin

    database:
      type: sqlite3-fk-wal
      # sqlite3-fk-wal: A raw file path is supported, but `file:<path>?_txlock=immediate` is recommended.
      # postgres: Connection string. For example, postgres://user:password@host/database?sslmode=disable
      uri: file:/data/data.db?_txlock=immediate
      max_open_conns: 5
      max_idle_conns: 1
      max_conn_idle_time: null
      max_conn_lifetime: null

    homeserver:
      address: "{{ .Values.matrix.url }}"
      domain: "{{ .Values.matrix.serverName }}"

      # Does the homeserver support https://github.com/matrix-org/matrix-spec-proposals/pull/2246?
      async_media: false

    appservice:
      address: "{{ $address }}"
      public_address: "https://{{ include "bridge-domain" . }}"

      hostname: ::
      port: 80

      id: '{{ .Release.Name }}'
      bot:
        username: {{ $username }}
        displayname: {{ $displayName }}
        avatar: {{ $avatar }}
      ephemeral_events: true
      async_transactions: false

      as_token: "{{ $asToken }}"
      hs_token: "{{ $hsToken }}"

      username_template: "{{ $bridgeMode }}_{{ "{{.}}" }}"

    matrix:
      delivery_receipts: true
      message_error_notices: true
      sync_direct_chat_list: true
      federate_rooms: false
      upload_file_threshold: 5242880

    public_media:
      enabled: false
      signing_key: ""
      expiry: 0
      hash_length: 32

    # More details can be found at https://docs.mau.fi/bridges/go/discord/direct-media.html
    direct_media:
      enabled: false
      server_name: "{{ .Release.Name }}.{{ .Values.matrix.serverName }}"
      allow_proxy: true
      # Matrix server signing key to make the federation tester pass, same format as synapse's .signing.key file.
      # This key is also used to sign the mxc:// URIs to ensure only the bridge can generate them.
      server_key: ""

    # See https://docs.mau.fi/bridges/general/backfill.html for more details.
    backfill:
      enabled: true
      max_initial_messages: 50
      max_catchup_messages: 500
      unread_hours_threshold: 720
      threads:
        max_initial_messages: 50

{{- if not (empty .Values.bridge.puppetting.asToken) }}
    double_puppet:
      secrets:
        "{{ .Values.matrix.serverName }}": "as_token:{{ .Values.bridge.puppetting.asToken }}"
{{- end }}

    encryption:
      allow: true
      default: true
      require: true
      appservice: false
      allow_key_sharing: true
      pickle_key: ""
      delete_keys:
        delete_outbound_on_ack: false
        dont_store_outbound: true
        ratchet_on_decrypt: true
        delete_fully_used_on_decrypt: true
        delete_prev_on_new_session: true
        delete_on_device_delete: true
        periodically_delete_expired: true
        delete_outdated_inbound: true

      verification_levels:
        receive: cross-signed-tofu
        send: cross-signed-tofu
        share: cross-signed-tofu

    logging:
      min_level: info
      writers:
        - type: stdout
          format: pretty-colored
