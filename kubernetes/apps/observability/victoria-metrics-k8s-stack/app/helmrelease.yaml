---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/source.toolkit.fluxcd.io/ocirepository_v1.json
apiVersion: source.toolkit.fluxcd.io/v1
kind: OCIRepository
metadata:
  name: victoria-metrics-k8s-stack
spec:
  interval: 5m
  layerSelector:
    mediaType: application/vnd.cncf.helm.chart.content.v1.tar+gzip
    operation: copy
  ref:
    tag: 0.59.5
  url: oci://ghcr.io/victoriametrics/helm-charts/victoria-metrics-k8s-stack
---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app vmks
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: victoria-metrics-k8s-stack
  dependsOn:
    - name: victoria-metrics-operator
  install:
    crds: CreateReplace
    remediation:
      retries: 3
  upgrade:
    crds: CreateReplace
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    nameOverride: *app

    victoria-metrics-operator:
      enabled: false

    kubeProxy:
      enabled: false

    kubeEtcd:
      enabled: false # Idk how to make this work on K3s, wait until switch to Talos.

    alertmanager:
#      route:
#        main:
#          enabled: true
#          hostnames: [ "alertmanager.${SECRET_DOMAIN}" ]
#          parentRefs:
#            - name: internal
#              namespace: envoy-gateway-system
#              sectionName: https
      spec:
#        alertmanagerConfiguration:
#          name: alertmanager
#          global:
#            resolveTimeout: 5m
        externalURL: https://alertmanager.${SECRET_DOMAIN}
        storage:
          volumeClaimTemplate:
            spec:
              resources:
                requests:
                  storage: 1Gi

    vmalert:
      spec:
        extraArgs:
          enableTCP6: "true"

    vmagent:
      spec:
        extraArgs:
          enableTCP6: "true"

    vmsingle:
#      route:
#        main:
#          enabled: true
#          hostnames: [ "prometheus.${SECRET_DOMAIN}" ]
#          parentRefs:
#            - name: internal
#              namespace: kube-system
#              sectionName: https
      spec:
        extraArgs:
          enableTCP6: "true"
        #        securityContext:
#          runAsNonRoot: true
#          runAsUser: 64535
#          runAsGroup: 64535
#          fsGroup: 64535
        retentionPeriod: 30d
        storage:
          storageClassName: "zfs-vault"
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 60Gi
        resources:
          requests:
            cpu: 100m
          limits:
            memory: 2Gi

    prometheus-node-exporter:
      fullnameOverride: node-exporter
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: [ "__meta_kubernetes_pod_node_name" ]
              targetLabel: kubernetes_node

    kube-state-metrics:
      fullnameOverride: kube-state-metrics
      metricLabelsAllowlist:
        - pods=[*]
        - deployments=[*]
        - persistentvolumeclaims=[*]
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: [ "__meta_kubernetes_pod_node_name" ]
              targetLabel: kubernetes_node

    grafana:
      enabled: false

    defaultDashboards:
      enabled: true
      dashboards:
        node-exporter-full:
          enabled: false

    additionalVictoriaMetricsMap:
      dockerhub-rules:
        groups:
          - name: dockerhub
            rules:
              - alert: DockerhubRateLimitRisk
                annotations:
                  summary: Kubernetes cluster Dockerhub rate limit risk
                expr: count(time() - container_last_seen{image=~"(docker.io).*",container!=""} < 30) > 100
                labels:
                  severity: critical
      oom-rules:
        groups:
          - name: oom
            rules:
              - alert: OomKilled
                annotations:
                  summary: Container {{ $labels.container }} in pod {{ $labels.namespace }}/{{ $labels.pod }} has been OOMKilled {{ $value }} times in the last 10 minutes.
                expr: (kube_pod_container_status_restarts_total - kube_pod_container_status_restarts_total offset 10m >= 1) and ignoring (reason) min_over_time(kube_pod_container_status_last_terminated_reason{reason="OOMKilled"}[10m]) == 1
                labels:
                  severity: critical
      zfs-rules:
        groups:
          - name: zfs
            rules:
              - alert: ZfsUnexpectedPoolState
                annotations:
                  summary: ZFS pool {{$labels.zpool}} on {{$labels.instance}} is in a unexpected state {{$labels.state}}
                expr: node_zfs_zpool_state{state!="online"} > 0
                labels:
                  severity: critical
