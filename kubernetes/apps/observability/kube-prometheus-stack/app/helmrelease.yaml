---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/source.toolkit.fluxcd.io/ocirepository_v1.json
apiVersion: source.toolkit.fluxcd.io/v1
kind: OCIRepository
metadata:
  name: kube-prometheus-stack
spec:
  interval: 5m
  layerSelector:
    mediaType: application/vnd.cncf.helm.chart.content.v1.tar+gzip
    operation: copy
  ref:
    tag: 74.2.1
  url: oci://ghcr.io/prometheus-community/charts/kube-prometheus-stack
---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: kube-prometheus-stack
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    crds:
      enabled: true
      upgradeJob:
        enabled: true
        forceConflicts: true
    cleanPrometheusOperatorObjectNames: true

    #    alertmanager:
    #      route:
    #        main:
    #          enabled: true
    #          hostnames: ["alertmanager.devbu.io"]
    #          parentRefs:
    #            - name: internal
    #              namespace: kube-system
    #              sectionName: https
    #      alertmanagerSpec:
    #        alertmanagerConfiguration:
    #          name: alertmanager
    #          global:
    #            resolveTimeout: 5m
    #        externalUrl: https://alertmanager.devbu.io
    #        storage:
    #          volumeClaimTemplate:
    #            spec:
    #              storageClassName: ceph-block
    #              resources:
    #                requests:
    #                  storage: 1Gi

    kubeEtcd:
      service:
        selector:
          component: kube-apiserver # etcd runs on control plane nodes

    kubeProxy:
      enabled: false

    prometheus:
      route:
        main:
          enabled: true
          hostnames: [ "prometheus.devbu.io" ]
          parentRefs:
            - name: internal
              namespace: kube-system
              sectionName: https
      prometheusSpec:
        image:
          registry: docker.io
          repository: prompp/prompp
          tag: 2.53.2-0.2.5
        securityContext:
          runAsNonRoot: true
          runAsUser: 64535
          runAsGroup: 64535
          fsGroup: 64535
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        ruleSelectorNilUsesHelmValues: false
        scrapeConfigSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        retention: 14d
        retentionSize: 50GB
        resources:
          requests:
            cpu: 100m
          limits:
            memory: 2000Mi
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: ceph-block
              resources:
                requests:
                  storage: 50Gi

    prometheus-node-exporter:
      fullnameOverride: node-exporter
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: [ "__meta_kubernetes_pod_node_name" ]
              targetLabel: kubernetes_node

    kube-state-metrics:
      fullnameOverride: kube-state-metrics
      metricLabelsAllowlist:
        - pods=[*]
        - deployments=[*]
        - persistentvolumeclaims=[*]
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: [ "__meta_kubernetes_pod_node_name" ]
              targetLabel: kubernetes_node

    #    grafana:
    #      enabled: false
    #      forceDeployDashboards: true

    grafana:
      route:
        main:
          enabled: true
          annotations:
            gethomepage.dev/enabled: "true"
            gethomepage.dev/group: Server
            gethomepage.dev/name: Grafana
            gethomepage.dev/icon: grafana.svg
          hostnames: [ "grafana.svc.m00nlit.dev" ]
          parentRefs:
            - name: internal
              namespace: kube-system
              sectionName: https

      grafana.ini:
        server:
          root_url: https://grafana.svc.m00nlit.dev/
        auth.generic_oauth:
          enabled: true
          name: Kanidm
          client_id: grafana
          client_secret: $__file{/etc/secrets/auth_generic_oauth/client_secret}

          scopes: openid,profile,email,groups
          auth_url: https://idm.m00nlit.dev/ui/oauth2
          token_url: https://idm.m00nlit.dev/oauth2/token
          api_url: https://idm.m00nlit.dev/oauth2/openid/grafana/userinfo
          use_pkce: true
          use_refresh_token: true
          allow_sign_up: true
          login_attribute_path: preferred_username
          groups_attribute_path: groups
          role_attribute_path: contains(grafana_role[*], 'GrafanaAdmin') && 'GrafanaAdmin' || contains(grafana_role[*], 'Admin') && 'Admin' || contains(grafana_role[*], 'Editor') && 'Editor' || 'Viewer'
          allow_assign_grafana_admin: true

      extraSecretMounts:
        - name: grafana-oidc
          secretName: grafana-oidc
          defaultMode: 0440
          mountPath: /etc/secrets/auth_generic_oauth
          readOnly: true

    additionalPrometheusRulesMap:
      dockerhub-rules:
        groups:
          - name: dockerhub
            rules:
              - alert: DockerhubRateLimitRisk
                annotations:
                  summary: Kubernetes cluster Dockerhub rate limit risk
                expr: count(time() - container_last_seen{image=~"(docker.io).*",container!=""} < 30) > 100
                labels:
                  severity: critical
      oom-rules:
        groups:
          - name: oom
            rules:
              - alert: OomKilled
                annotations:
                  summary: Container {{ $labels.container }} in pod {{ $labels.namespace }}/{{ $labels.pod }} has been OOMKilled {{ $value }} times in the last 10 minutes.
                expr: (kube_pod_container_status_restarts_total - kube_pod_container_status_restarts_total offset 10m >= 1) and ignoring (reason) min_over_time(kube_pod_container_status_last_terminated_reason{reason="OOMKilled"}[10m]) == 1
                labels:
                  severity: critical
#      zfs-rules:
#        groups:
#          - name: zfs
#            rules:
#              - alert: ZfsUnexpectedPoolState
#                annotations:
#                  summary: ZFS pool {{$labels.zpool}} on {{$labels.instance}} is in a unexpected state {{$labels.state}}
#                expr: node_zfs_zpool_state{state!="online"} > 0
#                labels:
#                  severity: critical
