---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app home-assistant
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: app-template
    namespace: flux-system
  values:
    controllers:
      home-assistant:
        type: statefulset

        annotations:
          reloader.stakater.com/auto: "true"

        #        pod:
        #          annotations:
        #            k8s.v1.cni.cncf.io/networks: |
        #              [{
        #                "name":"multus-lan",
        #                "namespace": "network"
        #              }]

        containers:
          app:
            image:
              repository: ghcr.io/home-operations/home-assistant
              tag: 2025.10.4@sha256:25a113a6d3e42ac66ba6b4172300b8c9a66f91e707a03cab5ad454910ca37eeb
            env:
              TZ: ${TZ}
              HOME_ASSISTANT__HACS_INSTALL: "true"
              HASS_OPENID_CLIENT_SECRET:
                valueFrom:
                  secretKeyRef:
                    name: kanidm-${APP}-oidc
                    key: client-secret

              HASS_RECORDER_DB_URL:
                valueFrom:
                  secretKeyRef:
                    name: "{{ .Release.Name }}-postgres"
                    key: url
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: [ "ALL" ] }
            resources:
              requests:
                cpu: 10m
              limits:
                memory: 2Gi

    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch

    service:
      app:
        controller: *app
        ports:
          http:
            port: 80
            targetPort: 8123

    serviceMonitor:
      app:
        endpoints:
          - port: http
            scheme: http
            path: /api/prometheus
            interval: 1m
            authorization:
              credentials:
                name: *app
                key: access_token

    route:
      app:
        hostnames: [ "{{ .Release.Name }}.${SECRET_DOMAIN}", "hass.${SECRET_DOMAIN}" ]
        #        annotations:
        #          gethomepage.dev/enabled: "true"
        #          gethomepage.dev/group: Media
        #          gethomepage.dev/name: Jellyfin
        #          gethomepage.dev/icon: jellyfin.svg
        #          gethomepage.dev/widget.type: jellyfin
        #          gethomepage.dev/widget.enableBlocks: "true"
        #          gethomepage.dev/widget.url: "http://jellyfin.media.svc"
        #          gethomepage.dev/widget.key: "{{ \"{{HOMEPAGE_VAR_JELLYFIN_KEY}}\" }}"
        parentRefs:
          - name: internal
            namespace: network
            sectionName: https
        rules:
          - backendRefs:
              - identifier: app
                port: 80

    persistence:
      config:
        type: configMap
        name: home-assistant-configmap
        globalMounts:
          - path: /config/configuration.yaml
            subPath: configuration.yaml
      data:
        existingClaim: *app
        globalMounts:
          - path: /config

      cache:
        size: 1Gi
        accessMode: ReadWriteOnce
        suffix: "cache"
        globalMounts:
          - path: /config/.venv
            subPath: venv

      tmpfs:
        type: emptyDir
        globalMounts:
          - path: /config/logs
            subPath: logs
          - path: /config/tts
            subPath: tts
          - path: /tmp
            subPath: tmp
