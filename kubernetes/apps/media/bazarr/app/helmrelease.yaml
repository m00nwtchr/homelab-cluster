---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app ${APP}
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: app-template
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    controllers:
      ${APP}:
        type: statefulset

        pod:
          securityContext:
            runAsUser: 2000
            runAsGroup: 2000
            runAsNonRoot: true
            fsGroup: 2000
            fsGroupChangePolicy: "OnRootMismatch"
            # supplementalGroups:
            #   - 65542 # gladius:external-services

        containers:
          app:
            image:
              repository: ghcr.io/home-operations/bazarr
              tag: 1.5.2@sha256:dbc87e5ce9e199709188e152e82b3ff5d33e6521a1b3d61e465aa75b4b739e7f
            env:
              POSTGRES_ENABLED: true
              POSTGRES_HOST: postgres-rw.postgres.svc
              POSTGRES_USERNAME:
                valueFrom:
                  secretKeyRef:
                    name: postgres-${APP}
                    key: username
              POSTGRES_PASSWORD:
                valueFrom:
                  secretKeyRef:
                    name: postgres-${APP}
                    key: password
              POSTGRES_DATABASE: *app
            # envFrom:
            #   - secretRef:
            #       name: bazarr-secret
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /health
                    port: &port 6767
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            resources:
              requests:
                cpu: 15m
                memory: 256Mi
              limits:
                memory: 512Mi
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                  - ALL

    service:
      app:
        controller: *app
        ports:
          http:
            targetPort: *port
            port: 80

    route:
      app:
        hostnames: [ "{{ .Release.Name }}.${SECRET_DOMAIN}" ]
        annotations:
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Media
          gethomepage.dev/name: Bazarr
          gethomepage.dev/href: "https://${APP}.svc.${SECRET_DOMAIN}"
          gethomepage.dev/icon: ${APP}.svg
          gethomepage.dev/widget.type: *app
          gethomepage.dev/widget.url: "http://${APP}.media.svc"
          gethomepage.dev/widget.key: "{{ \"{{HOMEPAGE_VAR_${APP}_API_KEY}}\" }}"
        parentRefs:
          - name: internal
            namespace: envoy-gateway-system
            sectionName: https
        rules:
          - backendRefs:
              - identifier: app
                port: 80

    # ingress:
    #   app:
    #     annotations:
    #       traefik.ingress.kubernetes.io/router.middlewares: traefik-vpn-only@kubernetescrd,traefik-auth@kubernetescrd
    #     hosts:
    #       - host: ${APP}.svc.m00nlit.dev
    #         paths:
    #           - path: /
    #             service:
    #               identifier: app
    #               port: http

    persistence:
      config:
        size: 1Gi
        accessMode: ReadWriteOnce
        annotations:
          argocd.argoproj.io/sync-options: Delete=false
      config-cache:
        type: emptyDir
        globalMounts:
          - path: /config/cache
      config-log:
        type: emptyDir
        globalMounts:
          - path: /config/log
      tmp:
        type: emptyDir
      media:
        existingClaim: media
        globalMounts:
          - path: /mnt/media
