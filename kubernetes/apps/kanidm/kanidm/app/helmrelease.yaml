---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app kanidm
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: app-template
    namespace: flux-system
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    defaultPodOptions:
      securityContext:
        seccompProfile:
          type: RuntimeDefault

    controllers:
      *app :
        type: statefulset

        pod:
          securityContext:
            runAsUser: 999
            runAsGroup: 999
            runAsNonRoot: true
            fsGroup: 999
            fsGroupChangePolicy: "OnRootMismatch"

        #        initContainers:
        #          kanidm-db-vacuum:
        #            image:
        #              repository: docker.io/kanidm/server
        #              tag: 1.6.3@sha256:8141f14aa62a271204bf3a0e2207d9a7c565e63a1bcd295aff4444e35967f1b8
        #
        #            args:
        #              - kanidmd
        #              - database
        #              - vacuum
        #              - -c
        #              - /data/server.toml
        #
        #            securityContext:
        #              runAsUser: 999
        #              runAsGroup: 999
        #              runAsNonRoot: true
        #              capabilities:
        #                drop: [ "ALL" ]

        containers:
          app:
            image:
              repository: docker.io/kanidm/server
              tag: 1.7.3@sha256:e3a59010c34d08a9564e94d48daf5c74cdef66a0a7cf55a1b92a98d4f686a2e8
            env:
              KANIDM_ADMIN_BIND_PATH: "/var/run/kanidmd.sock"
            probes:
              liveness: &probe
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /status
                    port: &port 8443
                    scheme: HTTPS
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probe
            resources:
              limits:
                cpu: 50M
                memory: 100Mi
              requests:
                cpu: 10m
                memory: 50Mi
            securityContext:
              capabilities:
                drop:
                  - ALL

      provision:
        pod:
          securityContext:
            runAsUser: 999
            runAsGroup: 999
            runAsNonRoot: true
            fsGroup: 999
            fsGroupChangePolicy: "OnRootMismatch"
        containers:
          app:
            image:
              repository: ghcr.io/m00nwtchr/kanidm-provision
              tag: 1.3.0@sha256:8f9d9bdaa7b485839789dfd17980b2a1cbfd02f1702475edb0ea0530efd68c22
            env:
              KANIDM_INSTANCE: "https://idm.${SECRET_DOMAIN}"
              KANIDM_TOKEN:
                valueFrom:
                  secretKeyRef:
                    name: kanidm-token
                    key: token
            securityContext:
              capabilities:
                drop:
                  - ALL

    service:
      app:
        controller: *app
        ports:
          https:
            port: 443
            targetPort: *port
          ldaps:
            port: 636
            targetPort: 3636

    route:
      app:
        #        kind: TLSRoute
        hostnames: [ "idm.${SECRET_DOMAIN}" ]
        parentRefs:
          - name: external
            namespace: network
            sectionName: https
        rules:
          - backendRefs:
              - identifier: app
                port: 443

    persistence:
      data:
        existingClaim: *app
        advancedMounts:
          *app :
            app:
              - path: /data

      config:
        type: configMap
        name: kanidm-configmap
        advancedMounts:
          *app :
            app:
              - path: /data/server.toml
                subPath: server.toml
      certs:
        type: secret
        name: kanidm-tls
        defaultMode: 0400
        advancedMounts:
          *app :
            app:
              - path: /certs

      empty:
        type: emptyDir
        globalMounts:
          - path: /var/run

      icon-cache:
        suffix: "icon-cache"
        size: 1Gi
        accessMode: ReadWriteOnce
        advancedMounts:
          provision:
            app:
              - path: /data/icons

    rbac:
      roles:
        kanidm-write-secret:
          type: ClusterRole
          rules:
            - apiGroups: [ "" ]
              resources: [ "secrets" ]
              verbs: [ "create", "patch" ]
        kanidm-read-cm:
          type: Role
          rules:
            - apiGroups: [ "" ]
              resources: [ "configmaps" ]
              verbs: [ "get", "list", "watch" ]
      bindings:
        kanidm-write-secret:
          type: ClusterRoleBinding
          roleRef:
            identifier: kanidm-write-secret
          subjects:
            - identifier: *app
        kanidm-read-cm:
          type: RoleBinding
          roleRef:
            identifier: kanidm-read-cm
          subjects:
            - identifier: *app

    serviceAccount:
      *app : { }
