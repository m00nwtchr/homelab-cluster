model_list:
  - model_name: gemma3:4b
    litellm_params:
      model: ollama_chat/gemma3:4b
      api_base: "http://ollama.ai.svc.cluster.local"
  - model_name: llava:7b
    litellm_params:
      model: ollama_chat/llava:7b
      api_base: "http://ollama.ai.svc.cluster.local"
  - model_name: llama3.2:3b
    litellm_params:
      model: ollama_chat/llama3.2:3b
      api_base: "http://ollama.ai.svc.cluster.local"
  - model_name: pc-llama3.2:3b
    litellm_params:
      model: ollama_chat/llama3.2:3b
      api_base: "http://192.168.0.126:11434"
  - model_name: gpt-oss-120b # Model Alias to use for requests
    litellm_params:
      model: openai/gpt-oss-120b
      api_key: "os.environ/GROQ_API_KEY" # ensure you have `GROQ_API_KEY` in your .env

general_settings:
  proxy_batch_write_at: 60 # Batch write spend updates every 60s
  database_connection_pool_limit: 10 # limit the number of database connections to = MAX Number of DB Connections/Number of instances of litellm proxy (Around 10-20 is good number)

  # OPTIONAL Best Practices
  disable_error_logs: True # turn off writing LLM Exceptions to DB
  allow_requests_on_db_unavailable: True # Only USE when running LiteLLM on your VPC. Allow requests to still be processed even if the DB is unavailable. We recommend doing this if you're running LiteLLM on VPC that cannot be accessed from the public internet.

router_settings:
  routing_strategy: usage-based-routing-v2
  # redis_url: "os.environ/REDIS_URL"
  redis_host: os.environ/REDIS_HOST

litellm_settings:
  request_timeout: 600    # raise Timeout error if call takes longer than 600 seconds. Default value is 6000seconds if not set
  set_verbose: False      # Switch off Debug Logging, ensure your logs do not have any debugging on
  json_logs: true         # Get debug logs in json format
  cache: True
  cache_params:
    type: redis
    host: os.environ/REDIS_HOST
