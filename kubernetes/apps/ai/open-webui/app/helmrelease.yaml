---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app ${APP}
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: app-template
    namespace: flux-system
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    controllers:
      open-webui:
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: ghcr.io/open-webui/open-webui
              tag: v0.6.26@sha256:3121ba5f8526bcc7f4ff387d0fc8a9caab54f84c4a6fb552b634575d10b1582b
            env:
              ENABLE_OPENAI_API: True
              ENABLE_OLLAMA_API: False
              OPENAI_API_BASE_URL: http://litellm.ai.svc.cluster.local

              # Vector
              VECTOR_DB: qdrant
              QDRANT_URI: http://qdrant.ai.svc
              ENABLE_QDRANT_MULTITENANCY_MODE: "True"

              # Image Generation
              #              ENABLE_IMAGE_GENERATION: True
              #              IMAGE_GENERATION_ENGINE: automatic1111
              #              IMAGE_GENERATION_MODEL: dreamshaper_8
              #              IMAGE_SIZE: 400x400
              #              IMAGE_STEPS: 8
              #              AUTOMATIC1111_BASE_URL: http://sdnext:7860/
              #              AUTOMATIC1111_CFG_SCALE: 2
              #              AUTOMATIC1111_SAMPLER: DPM++ SDE
              #              AUTOMATIC1111_SCHEDULER: Karras

              # Search
              ENABLE_WEB_SEARCH: True
              WEB_SEARCH_ENGINE: searxng
              SEARXNG_QUERY_URL: http://searxng.default.svc:8080/search?q=<query>

              # Websocket / Session Store
              REDIS_URL: "redis://dragonfly.database.svc.cluster.local:6379/8"

              # Auth
              OAUTH_CLIENT_ID: *app
              OPENID_PROVIDER_URL: https://idm.${SECRET_DOMAIN}/oauth2/openid/${APP}/.well-known/openid-configuration
              OAUTH_CODE_CHALLENGE_METHOD: "S256"
              ENABLE_OAUTH_ROLE_MANAGEMENT: True

              # RAG
              RAG_EMBEDDING_ENGINE: openai
#              RAG_OLLAMA_BASE_URL: http://ollama.ai.svc
              RAG_EMBEDDING_MODEL: all-minilm:22m
              ENABLE_RAG_HYBRID_SEARCH: True

              # Web
              HOST: "::"
              WEBUI_URL: https://${APP}.${SECRET_DOMAIN}
              CORS_ALLOW_ORIGIN: https://${APP}.${SECRET_DOMAIN}
              ENABLE_LOGIN_FORM: False
            envFrom:
              - secretRef:
                  name: *app
              - secretRef:
                  name: "${APP}-postgres"
            resources:
              requests:
                cpu: 500m
              limits:
                memory: 2Gi
    service:
      app:
        ports:
          http:
            port: 80
            targetPort: 8080

    route:
      app:
        hostnames: [ "{{ .Release.Name }}.${SECRET_DOMAIN}" ]
        parentRefs:
          - name: internal
            namespace: envoy-gateway-system
            sectionName: https
        rules:
          - backendRefs:
              - identifier: app
                port: 80
            timeouts:
              request: "300s"

    persistence:
      data:
        existingClaim: *app
        globalMounts:
          - path: /app/backend/data

      cache:
        size: 5Gi
        accessMode: ReadWriteOnce
        suffix: "cache"
        globalMounts:
          - path: /app/backend/data/cache
